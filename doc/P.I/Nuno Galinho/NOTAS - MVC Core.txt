::
MUDANÇA FORMATOS (nºcaracteres num atributo de um modelo) 
	.Não basta mudar o formato na validação dos atributos do modelo, é necessaria 
	 nova migração e update da BD.

::
LOCALIZAÇÃO DAS BASE DADOS:
	.C:\Users\Nuno
::
FAZER MIGRAÇÃO DE DADOS PARA BASE DADOS:
// Faz migrar dados dos modelos e cria tabelas na B.D.
// De cada vez que altero modelos, tenho de fazer migração
	.Tools
	.Nuget package manager
	.Package manage console (abre consola)
	.Na consola:
		.Add-Migration "nome da migração"
			.cria pasta migrations
		.Update-Database
::
RESOLVER PROBLEMA - using Microsoft.EntityFrameworkCore (não reconhecido):
	.Tools
	.Nuget package manager
	.Manage Nuget packages ...
	.Em browse filtrar por:
		.Microsoft.EntityFrameworkCore
		.Instalar:
			.Microsoft.EntityFrameworkCore
			.Microsoft.EntityFrameworkCore.Design
			.Microsoft.EntityFrameworkCore.SqlServer
			.Microsoft.EntityFrameworkCore.SqlServer.Design
			.Microsoft.EntityFrameworkCore.Tools
::
CRIAR TABELAS NA B.D. A PARTIR DE MODELS:
	.implementar as classes em \Models
	.criar campos na classe interface IRepository
	.implementar os campos adicionados em IRepository na classe EFRepository
	.config.B.D. com os modelos criados: na classe ApplicationDbContext
	.Povoar as B.D. na classe seedData
	.Fazer migração de dados
::
ROUTING : "passing parameters between views in MVC"
	1.MVC uses Routing. 
	 .You would have a UserController. 
	 .You would then have two views named: listpage and Details.  
	 .Inside the grid of the ListVIew you would have an MVC Routing command as such 
	  for the details:

	    @Html.ActionLink("View Details", "Details", new { id=item.ID })  
		
	That says "LInk text = "View Details", The "Details" is the action of the 
	controller and the last part says get this ID
	
	2.Strongly typed model binding to view: Here, we need to create a strongly typed view which will bind directly the model data to the various fields of the page.
		For example:

		Create a model with the required member variables.
		Let's say we have a model named 'Person' with member variable named as 
		'Name'
		Now pass the empty model to the view as parameter in the controller 
		action.
		For example:

		public ActionResult GetName()
		{
			Person person = new Person();
			return View(person);
		}
		Prepare the strongly typed view to display the model property values 
		through html elements as below:
		
		For example:
		<div><%= Html.Encode(person.Name) %></div>
		
		Create the action method that handles the POST request & processes 
		the data.
		For example:

		[HttpPost]
		public ActionResult GetPersonName(Person person)
		{    
			return Content(person.Name.ToString());
		}
::
REGEX - E-MAIL:
	// 
	(\w+\.\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})|(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})

	// Aceita qq caracteres atrás e frente de @
	.+@.+	

::
ANOTAÇÕES:
	EX:
	 [Required(ErrorMessage = "Introduza nome do Trilho")]